name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
        
    - name: Lint with flake8
      run: |
        # 停止構建如果有 Python 語法錯誤或未定義名稱
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # 警告其他問題但不停止構建
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Create test environment file
      run: |
        cat > .env << EOF
        LINE_CHANNEL_ACCESS_TOKEN=test_token
        LINE_CHANNEL_SECRET=test_secret
        YOUR_BOT_ID=test_bot_id
        LIFF_CHANNEL_ID=test_liff_channel
        LIFF_ID_CAMERA=test_camera_liff
        LIFF_ID_EDIT=test_edit_liff
        LIFF_ID_PRESCRIPTION_REMINDER=test_prescription_liff
        LIFF_ID_MANUAL_REMINDER=test_manual_liff
        LIFF_ID_HEALTH_FORM=test_health_liff
        LINE_LOGIN_CHANNEL_ID=test_login_channel
        LINE_LOGIN_CHANNEL_SECRET=test_login_secret
        GEMINI_API_KEY=test_gemini_key
        DB_HOST=localhost
        DB_USER=test_user
        DB_PASS=test_password
        DB_NAME=test_db
        DB_PORT=3306
        SECRET_KEY=test_secret_key
        EOF
        
    - name: Test application startup
      run: |
        python -c "
        import os
        from dotenv import load_dotenv
        load_dotenv()
        
        # 測試配置載入
        from config import Config
        print('配置載入成功')
        
        # 測試應用程式創建（不啟動伺服器）
        from app import create_app
        app = create_app('config.Config')
        print('應用程式創建成功')
        
        # 測試路由註冊
        with app.app_context():
            print(f'註冊的路由數量: {len(app.url_map._rules)}')
        "

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to Staging
      run: |
        echo "部署到 Staging 環境"
        echo "Docker 映像: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
        # 這裡可以添加實際的部署腳本
        # 例如：kubectl apply -f k8s/staging/ 或 gcloud run deploy 等
        
  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to Production
      run: |
        echo "部署到 Production 環境"
        echo "Docker 映像: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        # 這裡可以添加實際的部署腳本
        # 例如：kubectl apply -f k8s/production/ 或 gcloud run deploy 等

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'