name: Deploy to Google Cloud Run

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'ÈÉ®ÁΩ≤Áí∞Â¢É'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/**'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: pill-reminder-bot
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    permissions:
      contents: read
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
      
    - name: Build Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
        
    - name: Push to Container Registry
      run: |
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
        
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --timeout 300 \
          --concurrency 80 \
          --max-instances 10 \
          --set-env-vars="$(cat <<EOF
        LINE_CHANNEL_ACCESS_TOKEN=${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }},
        LINE_CHANNEL_SECRET=${{ secrets.LINE_CHANNEL_SECRET }},
        YOUR_BOT_ID=${{ secrets.YOUR_BOT_ID }},
        LIFF_CHANNEL_ID=${{ secrets.LIFF_CHANNEL_ID }},
        LIFF_ID_CAMERA=${{ secrets.LIFF_ID_CAMERA }},
        LIFF_ID_EDIT=${{ secrets.LIFF_ID_EDIT }},
        LIFF_ID_PRESCRIPTION_REMINDER=${{ secrets.LIFF_ID_PRESCRIPTION_REMINDER }},
        LIFF_ID_MANUAL_REMINDER=${{ secrets.LIFF_ID_MANUAL_REMINDER }},
        LIFF_ID_HEALTH_FORM=${{ secrets.LIFF_ID_HEALTH_FORM }},
        LINE_LOGIN_CHANNEL_ID=${{ secrets.LINE_LOGIN_CHANNEL_ID }},
        LINE_LOGIN_CHANNEL_SECRET=${{ secrets.LINE_LOGIN_CHANNEL_SECRET }},
        GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},
        DB_HOST=${{ secrets.DB_HOST }},
        DB_USER=${{ secrets.DB_USER }},
        DB_PASS=${{ secrets.DB_PASS }},
        DB_NAME=${{ secrets.DB_NAME }},
        DB_PORT=${{ secrets.DB_PORT }},
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        EOF
        )"
        
    - name: Get service URL
      id: url
      run: |
        URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        echo "service_url=$URL" >> $GITHUB_OUTPUT
        echo "üöÄ ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅÊúçÂãô URL: $URL"
        
    - name: Run health check
      run: |
        sleep 30
        curl -f ${{ steps.url.outputs.service_url }}/health || exit 1
        echo "‚úÖ ÂÅ•Â∫∑Ê™¢Êü•ÈÄöÈÅé"